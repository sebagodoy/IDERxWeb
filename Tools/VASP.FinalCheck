#!/usr/bin/env python3

import os

CWD = os.getcwd()
FileList = os.listdir(os.getcwd())


def StrFix(iStr,le):
	if len(iStr)<le:
		return ' '*(le-len(iStr))+iStr
	else:	return iStr

print(' '*4+'General check at the end of a VASP run')

# Log info
print(' '*4+'>>>> Looking for logfiles')
for iFile in FileList:
	if 'logfile' in iFile or 'Logfile' in iFile:
		LogFile = iFile
		print(' '*7+'> Logfile found   : '+LogFile)

		# Check log file
		with open(LogFile) as f:
			LogLines = f.readlines()
			f.close()

		scpCounter=0
		geomCounter=0
		for iLine in LogLines:
			if len(iLine.split())>1:
				if iLine.split()[0] in ['DAV:','RMM:']: scpCounter+=1
				if 'E0=' in iLine.split(): geomCounter += 1
		print(' '*12+'scp counter  : '+str(scpCounter))
		print(' '*12+'geom counter : ' + str(geomCounter))


	# else: print(' '*4+'>>>> Did not found a logfile of the run')



# OUTCAR info
print(' '*4+'>>>> Looking for OUTCAR files')

print(' '*7+'> Opening OUTCAR ...', end=' ')
with open('OUTCAR', 'r') as f:
	OUTCARlines = f.readlines()
	f.close()
print('Ok')

if 'Voluntary context switches:' in OUTCARlines[-1]:print(' '*7+'> Properly finished run')
else: quit(' '*7+'> Interrupted run\n'+' ' * 4 + 'Done!')



# Check IBRION
for iLine in OUTCARlines:
	if len(iLine.split()) > 3:
		if 'IBRION' in iLine.split():
			IBRION=int(iLine.split()[2])
			print(' '*7+'> Recognize run type '+str(IBRION)+' : ',end='')
			if IBRION in [1,2]: print('geometry relaxation')
			elif IBRION in [5,6,7,8]:print('frequency calculation')
			else: print('')

# Dispersion correction
if IBRION in [-1,1,2]:
	GotD3 = False
	for iLine in range(len(OUTCARlines)):
		ThisLine = OUTCARlines[len(OUTCARlines) - iLine - 1]

		if GotD3 == False:
			if 'IVDW' in ThisLine:
				GotD3 = True
				# Dispersion type
				print(' '*7+'> Dispersion correction found : IVDW='+ThisLine.split()[2],end=', ')
				for i in OUTCARlines[len(OUTCARlines) - iLine - 2].split(): print(i, end=' ')
				print()
				# Dispersion energy
				while ' Edisp' not in OUTCARlines[len(OUTCARlines) - iLine - 2]: iLine+=1
				print(' '*7+'> Dispersion energy of last geometry = '+OUTCARlines[len(OUTCARlines) - iLine - 2].split()[2]+' (eV)')
				break
	if GotD3 == False:
		print(' '*7+'> No dispersion correction found')






# Recorre hacia arriba
if IBRION in [1,2]:
	Convergido = False; GotE = False
	for iLine in range(len(OUTCARlines)):
		ThisLine = OUTCARlines[len(OUTCARlines) - iLine - 1]

		if Convergido == False:
			if ThisLine == " reached required accuracy - stopping structural energy minimisation\n":
				Convergido = True
				print(' '*7+'> Reached geometric convergence')
			continue
		else:
			if len(ThisLine.split())>4:
				if ThisLine.split()[4] == "energy(sigma->0)" :
					print (' '*7+'> Energy (sigma->0) = '+ThisLine.split()[6])
					GotE = True
				else:
					continue
			else:
				continue
		if GotE==True:
			print(' '*4+'Done!')
			quit()
	if not GotE:
		print(' '*7+'> Couldn\'t find geometric convergence')
		print(' ' * 4 + 'Done!')

elif IBRION in [5,6,7,8]:
	print(' '*7+'> Frequencies found:')
	for iLine in OUTCARlines:
		if 'THz' in iLine.split():
			print(' '*9,end='')
			for i in [0,1,2]: print(str(iLine.split()[i]),end=' ')
			print(StrFix(iLine.split()[7],12),end=' ')
			print(StrFix(iLine.split()[8], 4),end=' ')
			print(StrFix(iLine.split()[9], 12), end=' ')
			print(StrFix(iLine.split()[10], 4))
	print(' ' * 4 + 'Done!')




else: print(' ' * 4 + 'Done!')

